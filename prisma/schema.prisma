generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== MODELS OF CATALOG ==========

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  products    Product[]
  description String?
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String 
  description String ?
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String
  stock       Int  ?    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])

  cartItems   CartItem[]
  orderItems  OrderItem[]
}

// ========== MODELS OF USER AND AUTHORIZATION ==========

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String? // next-auth додає поле для аватара
  password      String? // Стає опціональним
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]

  cart Cart?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ========== MODELS OF THE CART ==========

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  userId    String     @unique 
  user      User       @relation(fields: [userId], references: [id])

  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])

  @@unique([cartId, productId])
}


// ========== MODELS OF ORDER ==========

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

model Order {
  id          String      @id @default(cuid())
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId      String
  user        User        @relation(fields: [userId], references: [id])

  items       OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // Зберігаємо ціну товару на момент покупки

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
}